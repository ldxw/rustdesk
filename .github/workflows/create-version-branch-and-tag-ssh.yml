name: 直接在分支修改：公开子模块+URL替换+打Tag（tag锚定分支提交）

on:
  workflow_dispatch:
    inputs:
      work_branch:
        description: "要修改并推送的分支（例如 1.4.2）"
        required: true
        default: "1.4.2"
      force:
        description: "是否强推分支/覆盖同名Tag"
        type: choice
        options: ["false", "true"]
        required: true
        default: "false"

      # 子模块（公开仓库，走 HTTPS）
      submodule_url:
        description: "子模块公开仓库（HTTPS）地址"
        required: true
        default: "https://github.com/ldxw/rustdesk_hbb_common.git"
      submodule_branch:
        description: "子模块分支（auto=自动检测远端默认分支）"
        required: true
        default: "auto"

      # URL 替换
      admin_url:
        description: "src/common.rs 中替换为的新管理端地址（替换 https://admin.rustdesk.com）"
        required: true
        default: "https://admin-hy.rs.ldxw.top"

      # 打 tag 并触发构建（retag=删除远端同名 tag 后重推）
      do_tag:
        description: "是否在 work_branch 的 HEAD 打 Tag（版本号见下方）"
        type: choice
        options: ["false", "true"]
        required: true
        default: "true"
      version:
        description: "Tag 名（留空则使用 work_branch）"
        required: false
        default: ""
      tag_message:
        description: "Tag 注释信息"
        required: false
        default: "修改内置服务器和 key"
      trigger_mode:
        description: "触发方式：retag=删除同名 tag 后重推；poke=空提交触发 push；none=仅正常推送"
        type: choice
        options: ["retag", "poke", "none"]
        required: true
        default: "retag"

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      WORK_BRANCH: ${{ inputs.work_branch }}
      FORCE: ${{ inputs.force }}
    steps:
      - name: Checkout this repo (no submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Git identity
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # —— 切到目标工作分支 —— 
      - name: Ensure local branch from origin
        run: |
          set -euo pipefail
          git fetch origin --no-tags
          if git show-ref --verify --quiet "refs/heads/${WORK_BRANCH}"; then
            git checkout "${WORK_BRANCH}"
            if git show-ref --verify --quiet "refs/remotes/origin/${WORK_BRANCH}"; then
              git merge --ff-only "origin/${WORK_BRANCH}" || true
            fi
          else
            if git show-ref --verify --quiet "refs/remotes/origin/${WORK_BRANCH}"; then
              git checkout -B "${WORK_BRANCH}" "origin/${WORK_BRANCH}"
            else
              echo "::error::远端不存在分支 origin/${WORK_BRANCH}，请先创建后再运行。"
              exit 1
            fi
          fi

      # —— 配置并（必要时自动检测）子模块分支 —— 
      - name: Prepare submodule config (auto-detect branch if needed)
        id: sm_prep
        run: |
          set -euo pipefail
          SM_NAME='libs/hbb_common'
          SM_PATH='libs/hbb_common'
          SM_URL='${{ inputs.submodule_url }}'
          REQ_BRANCH='${{ inputs.submodule_branch }}'

          DETECTED_BRANCH="$REQ_BRANCH"
          if [ "$REQ_BRANCH" = "auto" ] || ! git ls-remote --heads "${SM_URL}" "${REQ_BRANCH}" | grep -q .; then
            DETECTED_BRANCH="$(git ls-remote --symref "${SM_URL}" HEAD | awk '/^ref:/ {print $2}' | sed 's#refs/heads/##')"
            if [ -z "${DETECTED_BRANCH}" ]; then
              echo "::error::无法检测子模块远端默认分支，请手动指定 submodule_branch。"
              exit 1
            fi
            echo "使用检测到的远端默认分支：${DETECTED_BRANCH}"
          fi
          echo "sm_branch=${DETECTED_BRANCH}" >> "$GITHUB_OUTPUT"

          # 写入 .gitmodules（公开仓库用 HTTPS）
          git config -f .gitmodules "submodule.${SM_NAME}.url"    "${SM_URL}"
          git config -f .gitmodules "submodule.${SM_NAME}.path"   "${SM_PATH}"
          git config -f .gitmodules "submodule.${SM_NAME}.branch" "${DETECTED_BRANCH}"
          git add .gitmodules
          if ! git diff --cached --quiet; then
            git commit -m "使用公开子模块 ${SM_URL}，分支 ${DETECTED_BRANCH}"
          fi

          # 同步到本地 submodule 配置（.git/config）
          git submodule set-url    "${SM_PATH}" "${SM_URL}" || true
          git submodule set-branch --branch "${DETECTED_BRANCH}" "${SM_PATH}" || true

      # —— 更新子模块 —— 
      - name: Sync & update submodule (remote, resilient)
        run: |
          set -euo pipefail
          SM_PATH='libs/hbb_common'
          SM_BRANCH='${{ steps.sm_prep.outputs.sm_branch }}'

          # 避免上次失败留下的半成品目录
          if [ -d "${SM_PATH}" ] && [ ! -d "${SM_PATH}/.git" ] && [ ! -f "${SM_PATH}/.git" ]; then
            rm -rf "${SM_PATH}"
          fi

          git submodule sync -- "${SM_PATH}"
          git submodule update --init --remote "${SM_PATH}"

          # 双保险：进入子模块显式抓取并切换到期望分支
          git -C "${SM_PATH}" fetch origin --no-tags
          if ! git -C "${SM_PATH}" rev-parse --verify -q "refs/remotes/origin/${SM_BRANCH}" >/dev/null; then
            echo "::error::子模块远端不存在分支 origin/${SM_BRANCH}。"
            exit 1
          fi
          git -C "${SM_PATH}" checkout -B "${SM_BRANCH}" "origin/${SM_BRANCH}"

          # 记录子模块的新提交（更新 superproject 的索引）
          git add "${SM_PATH}"
          if ! git diff --cached --quiet; then
            git commit -m "更新子模块 ${SM_PATH} 至远端分支 ${SM_BRANCH} 的最新提交"
          fi

      # —— URL 替换：src/common.rs 中将 admin.rustdesk.com 替换为自定义地址 —— 
      - name: Replace admin URL in src/common.rs
        run: |
          set -euo pipefail
          FILE="src/common.rs"
          NEW_URL='${{ inputs.admin_url }}'

          if [ ! -f "$FILE" ]; then
            echo "::warning file=${FILE}::未找到 ${FILE}，跳过 URL 替换"
          else
            BEFORE_SHA=$(sha256sum "$FILE" | awk '{print $1}')
            NEW_ESC=${NEW_URL//&/\\&}
            sed -i -e "s|https://admin\.rustdesk\.com|$NEW_ESC|g" "$FILE"
            AFTER_SHA=$(sha256sum "$FILE" | awk '{print $1}')

            if [ "$BEFORE_SHA" != "$AFTER_SHA" ]; then
              git add "$FILE"
              git commit -m "chore: replace admin URL in src/common.rs -> ${NEW_URL}"
              echo "URL 替换完成：https://admin.rustdesk.com -> ${NEW_URL}"
            else
              echo "未发现可替换的目标 URL，或内容已是最新。"
            fi
          fi

      # —— 可选：制造空提交触发 on:push（如果你选择 poke） —— 
      - name: Poke branch with empty commit (optional)
        if: ${{ inputs.trigger_mode == 'poke' }}
        run: |
          set -euo pipefail
          git commit --allow-empty -m "ci: poke to trigger build $(date -u +%FT%TZ)"

      # —— 用 PAT 推送分支（正常 push 事件） —— 
      - name: Push branch via PAT
        env:
          GH_TOKEN: ${{ secrets.REPO_WORKFLOW_PAT }}   # PAT：需 repo 权限
        run: |
          set -euo pipefail
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          if [ "$FORCE" = "true" ]; then
            git push --force-with-lease origin "HEAD:refs/heads/${WORK_BRANCH}"
          else
            git push origin "HEAD:refs/heads/${WORK_BRANCH}"
          fi

      # —— 在 work_branch 的 HEAD 打 tag（tag 锚定到分支提交），并按需 retag 触发构建 —— 
      - name: Create/Retag & Push tag (tag anchored to branch HEAD)
        if: ${{ inputs.do_tag == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_WORKFLOW_PAT }}   # PAT：需 repo 权限
        run: |
          set -euo pipefail
          TAG_INPUT='${{ inputs.version }}'
          TAG="$TAG_INPUT"
          if [ -z "$TAG" ]; then TAG="${WORK_BRANCH}"; fi
          MSG='${{ inputs.tag_message }}'

          # 取出 work_branch 的提交 SHA，确保 tag 锚定到该分支的 HEAD
          git checkout "${WORK_BRANCH}"
          COMMIT_SHA="$(git rev-parse "${WORK_BRANCH}^{commit}")"

          # 如选择 retag，先删除远端同名 tag 以强制触发 on:push:tags
          if [ "${{ inputs.trigger_mode }}" = "retag" ]; then
            git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git push origin ":refs/tags/${TAG}" || true
          fi

          # 在指定提交上创建/更新注释 tag（显式绑定 COMMIT_SHA）
          if [ "$FORCE" = "true" ]; then
            git tag -a -f "$TAG" -m "$MSG" "$COMMIT_SHA"
          else
            if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
              echo "::notice::Tag $TAG 已存在，将保持不变（若需覆盖请 force=true 或 trigger_mode=retag）。"
            else
              git tag -a "$TAG" -m "$MSG" "$COMMIT_SHA"
            fi
          fi

          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          if [ "$FORCE" = "true" ] || [ "${{ inputs.trigger_mode }}" = "retag" ]; then
            git push --force-with-lease origin "refs/tags/${TAG}"
          else
            git push origin "refs/tags/${TAG}"
          fi
