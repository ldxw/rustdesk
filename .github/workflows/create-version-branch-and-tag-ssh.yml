name: 直接在分支修改：替换子模块(SSH)并推送/可选打Tag

on:
  workflow_dispatch:
    inputs:
      work_branch:
        description: "要修改并推送的分支（已存在于远端 origin）"
        required: true
        default: "1.4.2"
      force:
        description: "是否强推分支/覆盖同名Tag"
        type: choice
        options: ["false", "true"]
        required: true
        default: "false"
      # 子模块参数
      submodule_name:
        description: ".gitmodules 中的子模块名（方括号里的名称）"
        required: true
        default: "libs/hbb_common"
      submodule_path:
        description: "子模块路径（.gitmodules 的 path）"
        required: true
        default: "libs/hbb_common"
      submodule_ssh_url:
        description: "私有 fork 的 SSH 地址"
        required: true
        default: "git@github.com:ldxw/rustdesk_hbb_common.git"
      submodule_branch:
        description: "子模块需要跟踪的分支（用于 --remote）"
        required: true
        default: "master"
      # 可选打 tag
      do_tag:
        description: "是否在当前分支 HEAD 打同名/指定版本 Tag"
        type: choice
        options: ["false", "true"]
        required: true
        default: "false"
      version:
        description: "Tag 名（留空则使用 work_branch）"
        required: false
        default: ""
      tag_message:
        description: "Tag 注释信息"
        required: false
        default: "修改内置服务器和 key"

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      WORK_BRANCH: ${{ inputs.work_branch }}
      FORCE: ${{ inputs.force }}
    steps:
      - name: Checkout this repo (no submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Git identity
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # —— SSH 准备 ——
      - name: Setup SSH agent with private key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Trust github.com host key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      # —— 确保本地切到要操作的分支（从 origin/<branch> 检出/更新） ——
      - name: Ensure local branch from origin
        run: |
          set -euo pipefail
          git fetch origin --no-tags
          if git show-ref --verify --quiet "refs/heads/${WORK_BRANCH}"; then
            git checkout "${WORK_BRANCH}"
            # 以远端为准快进
            if git show-ref --verify --quiet "refs/remotes/origin/${WORK_BRANCH}"; then
              git merge --ff-only "origin/${WORK_BRANCH}" || true
            fi
          else
            if git show-ref --verify --quiet "refs/remotes/origin/${WORK_BRANCH}"; then
              git checkout -B "${WORK_BRANCH}" "origin/${WORK_BRANCH}"
            else
              echo "::error::远端不存在分支 origin/${WORK_BRANCH}，请先创建后再运行。"
              exit 1
            fi
          fi

      # —— 修改 .gitmodules 为私有 SSH 地址 + 指定分支 ——
      - name: Rewrite .gitmodules to SSH & branch
        run: |
          set -euo pipefail
          SM_NAME='${{ inputs.submodule_name }}'
          SM_PATH='${{ inputs.submodule_path }}'
          SM_SSH='${{ inputs.submodule_ssh_url }}'
          SM_BRANCH='${{ inputs.submodule_branch }}'

          git config -f .gitmodules "submodule.${SM_NAME}.url"    "${SM_SSH}"
          git config -f .gitmodules "submodule.${SM_NAME}.path"   "${SM_PATH}"
          git config -f .gitmodules "submodule.${SM_NAME}.branch" "${SM_BRANCH}"

          git add .gitmodules
          if ! git diff --cached --quiet; then
            git commit -m "使用 SSH 私有子模块 ${SM_SSH}，分支 ${SM_BRANCH}"
          fi

      # —— 同步并更新子模块到远端分支最新提交 ——
      - name: Sync & update submodule (remote)
        run: |
          set -euo pipefail
          SM_PATH='${{ inputs.submodule_path }}'
          git submodule sync -- "${SM_PATH}"
          git submodule update --init --remote "${SM_PATH}"

          git add "${SM_PATH}"
          if ! git diff --cached --quiet; then
            git commit -m "更新子模块 ${SM_PATH} 至远端分支最新提交"
          fi

      # —— 用 SSH 推送分支（显式 refs/heads，避免与同名 tag 冲突） ——
      - name: Push branch via SSH
        run: |
          set -euo pipefail
          git remote set-url origin "git@github.com:${GITHUB_REPOSITORY}.git"
          if [ "$FORCE" = "true" ]; then
            git push --force-with-lease origin "HEAD:refs/heads/${WORK_BRANCH}"
          else
            git push origin "HEAD:refs/heads/${WORK_BRANCH}"
          fi

      # —— 可选：在当前分支 HEAD 打 Tag 并推送 ——
      - name: Create/Push tag (optional)
        if: ${{ inputs.do_tag == 'true' }}
        run: |
          set -euo pipefail
          TAG="${{ inputs.version }}"
          if [ -z "${TAG}" ]; then TAG="${WORK_BRANCH}"; fi
          MSG='${{ inputs.tag_message }}'

          if [ "$FORCE" = "true" ]; then
            git tag -a -f "$TAG" -m "$MSG"
          else
            if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
              echo "::error::Tag $TAG 已存在。若需覆盖，请将 force 设为 true"
              exit 1
            fi
            git tag -a "$TAG" -m "$MSG"
          fi

          git remote set-url origin "git@github.com:${GITHUB_REPOSITORY}.git"
          if [ "$FORCE" = "true" ]; then
            git push --force-with-lease origin "refs/tags/${TAG}"
          else
            git push origin "refs/tags/${TAG}"
          fi
